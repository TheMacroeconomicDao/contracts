// SPDX-License-Identifier: AGPL
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract RewardContract is Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    IERC20 public gbrToken;
    mapping(string => uint256) private rewardCodes;

    event RewardCodeGenerated(string indexed code, uint256 rewardAmount);
    event RewardClaimed(address indexed user, string indexed code, uint256 rewardAmount);

    constructor(address _gbrTokenAddress) {
        gbrToken = IERC20(_gbrTokenAddress);
    }

    function generateRewardCode(uint256 rewardAmount) external onlyOwner returns (string memory) {
        require(rewardAmount == 1000 * 10**18 || rewardAmount == 5000 * 10**18 || rewardAmount == 10000 * 10**18, "Invalid reward amount");

        bytes32 codeHash = keccak256(abi.encodePacked(block.timestamp, msg.sender));
        string memory code = toString(codeHash);

        rewardCodes[code] = rewardAmount;
        emit RewardCodeGenerated(code, rewardAmount);

        return code;
    }

    function claimReward(string memory code) external nonReentrant {
        uint256 rewardAmount = rewardCodes[code];
        require(rewardAmount > 0, "Invalid code");
        require(gbrToken.balanceOf(address(this)) >= rewardAmount, "Not enough tokens in the contract");

        delete rewardCodes[code];
        gbrToken.safeTransfer(msg.sender, rewardAmount);
        emit RewardClaimed(msg.sender, code, rewardAmount);
    }

    function isRewardCodeValid(string memory code) external view returns (bool) {
        return rewardCodes[code] > 0;
    }

    function toString(bytes32 value) internal pure returns (string memory) {
        bytes memory alphabet = "0123456789abcdef";
        bytes memory str = new bytes(16);  // Обрезаем строку до 16 символов
        for (uint256 i = 0; i < 8; i++) {  // Цикл теперь проходит только 8 итераций
            str[i * 2] = alphabet[uint256(uint8(value[i] >> 4))];
            str[i * 2 + 1] = alphabet[uint256(uint8(value[i] & 0x0f))];
        }
        return string(str);
    }
}
